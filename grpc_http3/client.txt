use hello_world::greeter_client::GreeterClient;
use hello_world::HelloRequest;
use tonic::transport::{Endpoint,Uri};
use tower::service_fn;
use hyper_util::rt::tokio::TokioIo;
use tokio::task;
use tokio::io::{AsyncReadExt, AsyncWriteExt};
use tokio::time::{sleep, Duration};

pub mod hello_world {
    tonic::include_proto!("helloworld");
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {

    let channel = Endpoint::from_static("https://127.0.0.1:4433")
        .connect_with_connector(service_fn(|_: Uri| async {
            let (mut client, server) = tokio::io::duplex(128);

            task::spawn(async move { 
                let mut buf = [0; 65535];

                let peer_addr: std::net::SocketAddr = "127.0.0.1:4433".parse().expect("Failed to parse address");
            
                let timeout = Duration::from_millis(10); 

                let socket = mio::net::UdpSocket::bind("0.0.0.0:0".parse().unwrap()).unwrap();
            
                loop{
                    'read: loop { // Loop that reads UDP traffic and feed it to gRPC
                        println!("Read loop");
        
                        let (len, from) = match socket.recv_from(&mut buf) {
                            Ok(v) => v,
            
                            Err(e) => {
                                println!("Nothing to read: {:?}", e);
                                sleep(timeout).await; // Wait a bit before trying again
                                break 'read;
                            },
                        };

                        let out = &buf[..len];
                        println!("Received {} bytes from {:?}", out.len(), from);
                        client.write_all(out).await.unwrap(); //Send data to the gRPC server

                    }

                    'write: loop{ // Loop that reads gRPC data and send it to the UDP socket
                        println!("Write loop");
                        let mut out = [0; 65535];
                        match client.read(&mut out).await {
                            Ok(0) => {
                                println!("Nothing to send to {}", peer_addr);
                            },
                            Ok(n) => {
                                println!("Send {} bytes to {:?}", n, peer_addr);
                                socket.send_to(&out[..n], peer_addr).unwrap();
                            },
                            Err(e) => {
                                println!("Error reading from client {}: {:?}", peer_addr, e);
                            }
                        }
                    }
                }
            });


            Ok::<_, std::io::Error>(TokioIo::new(server))
        }))
        .await?;

    let mut client = GreeterClient::new(channel);
     

    let request = tonic::Request::new(HelloRequest {
        name: "Maxime".into(),
    });
   

    let response = client.say_hello(request).await?;

    println!("RESPONSE={:?}", response);

    Ok(())
}